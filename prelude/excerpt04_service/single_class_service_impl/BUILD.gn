# Copyright (c) 2018 The Prelude Authors.
# Use of this source code is governed by MIT license that can be
# found in MIT-LICENSE file.

import("//services/service_manager/public/cpp/service.gni")
import("//services/service_manager/public/service_manifest.gni")

# for unit tests
import("//services/catalog/public/tools/catalog.gni")
import("//services/service_manager/public/tools/test/service_test.gni")

group("single_class_service_impl") {
  testonly = true
  deps = [
    ":single_class_service_unittests",
  ]
}

####### STEP 1. Define and compile service impl #######
# this step involves four files:
# single_class_service_impl.h, single_class_service_impl.cpp -- implement the log and service interface
# single_class_service_main.cpp -- service executable main
# single_class_service_manifest.json

source_set("lib") {
  public = [ "single_class_service_impl.h" ]
  sources = [
    "single_class_service_impl.cpp"
  ]

  public_deps = [
    "//base",
    "//services/service_manager/public/cpp",
  ]
}

# service name (i.e., single_class_service must match the string in constants.mojom, and the name used in manifest below)
service("single_class_service") {
  sources = [
    "single_class_service_main.cpp",
  ]
  deps = [
    ":lib",
    "//prelude/excerpt04_service/interfaces",
    "//services/service_manager/public/cpp",
  ]
}

service_manifest("manifest") {
  name = "single_class_service"   # must match the name inside json
  source = "single_class_service_manifest.json"
}

####### STEP 2. Implement the unit test to use the service #######
# it only uses manifest target from last step
# this step involves three files:
# single_class_service_unittests.cpp
# single_class_service_unittests_manifest.json

# run the test with --single-process-tests

service_test("single_class_service_unittests") {
  sources = [
    "single_class_service_unittests.cpp",
  ]
  deps = [
    "//prelude/excerpt04_service/interfaces",     # required, otherwise link error
    "//testing/gtest",
    "//services/service_manager/public/cpp:service_test_support",
  ]
  data_deps = [ ":single_class_service"]
  catalog = ":single_class_service_unittests_catalog"
}

service_manifest("unittests_manifest") {
  name = "single_class_service_unittests"
  source = "single_class_service_unittests_manifest.json"
}

catalog("single_class_service_unittests_catalog") {
  testonly = true
  embedded_services = [ ":unittests_manifest" ]
  standalone_services = [ ":manifest" ]
}


